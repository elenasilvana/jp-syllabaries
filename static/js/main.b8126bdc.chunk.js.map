{"version":3,"sources":["components/Home/index.js","components/syllabarycard/index.jsx","components/syllabaryboard/index.jsx","utils/syllabariesCharacters.js","utils/syllabary.js","deck.js","components/Syllabary/index.js","components/Game/index.js","components/card/MemoryCard.jsx","components/board/index.jsx","components/MemoryGame/index.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","Component","SyllabaryCard","handleClick","id","type","flipped","height","width","style","onClick","src","process","SyllabaryBoard","cards","map","card","key","includes","KATAKANA","CARDS_NUMBER","initializeDeck","syllabary","Syllabary","console","log","length","index","Math","floor","random","push","splice","array","_array","slice","i","randomIndex","temp","shuffle","useState","setCards","setFlipped","useEffect","reduce","acc","Deck","class","Game","MemoryCard","disabled","solved","Board","dimension","MemoryGame","setDimension","setSolved","setDisabled","resizeBoard","preloadImages","resizeListener","window","addEventListener","removeEventListener","Image","resetCards","sameCardClicked","isMatch","clickedCard","find","min","document","documentElement","clientWidth","clientHeight","setTimeout","App","collapsed","setCollapsed","Navbar","color","light","NavbarBrand","to","NavbarToggler","Collapse","isOpen","navbar","Nav","NavItem","NavLink","path","exact","component","HomePage","SyllabaryPage","GamePage","MemoryGamePage","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yYAEqBA,E,iLAEb,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,iDACV,oDAEA,qP,GAPaC,a,cCGnB,SAASC,EAAT,GAOZ,IANCC,EAMF,EANEA,YACAC,EAKF,EALEA,GACAC,EAIF,EAJEA,KACAC,EAGF,EAHEA,QACAC,EAEF,EAFEA,OACAC,EACF,EADEA,MAEA,OACA,yBAAKR,UAAS,yBAAoBM,EAAU,UAAY,IACxDG,MAAO,CACHD,QAAOD,UAEXG,QAAS,kBAAMP,EAAYC,KAEvB,yBAAKJ,UAAU,WACX,yBACAS,MAAO,CACHF,SAAQC,SAEZR,UAAWM,EAAU,QAAU,OAC/BK,IAAY,UAAMC,kBAAN,yBAA6CP,EAA7C,YCpBT,SAASQ,EAAT,GAEZ,IADCC,EACF,EADEA,MAAOR,EACT,EADSA,QAASH,EAClB,EADkBA,YAEhB,OACI,yBAAKH,UAAU,SACVc,EAAMC,IAAI,SAACC,GAAD,OACN,kBAACd,EAAD,CACAe,IAAKD,EAAKZ,GACVA,GAAIY,EAAKZ,GACTC,KAAMW,EAAKX,KACXG,MAAO,IACPD,OAAQ,IACRD,QAASA,EAAQY,SAASF,EAAKZ,IAC/BD,YAAa,kBAAMA,EAAYa,EAAKZ,UCnB9C,IAAMe,EAAW,CACtB,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KCnDa,mBAAM,CACnB,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,K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","file":"static/js/main.b8126bdc.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Home extends Component {\n    render(){\n        return(\n            <div className=\"container\">\n                <div className=\"row align-items-center justify-content-center\">\n                     <h1>Japanese Syllabaries</h1>\n\n                     <p> If you are interested on learn the japanese syllabaries we invite you to get familiar with the katakana syllabary on our Syllabaries section, \n                         and to play with a syllabary memory game to prove your memory :)! \n                     </p>\n\n                </div>\n\n            </div>\n        )\n    }\n}","import React from 'react';\nimport propTypes from 'prop-types'\n\nimport './styles.css'\n\nexport default function SyllabaryCard ({\n    handleClick,\n    id,\n    type,\n    flipped,\n    height,\n    width\n}){\n    return (\n    <div className={`flip-container ${flipped ? 'flipped' : ''}`}\n    style={{\n        width, height\n    }}\n    onClick={() => handleClick(id)}\n    >\n        <div className=\"flipper\">\n            <img \n            style={{\n                height, width\n            }}\n            className={flipped ? 'front' : 'back'}\n            src={flipped ? `${process.env.PUBLIC_URL}/img/katakana/${type}.png`: `${process.env.PUBLIC_URL}/img/katakana/${type}.png`}></img>\n\n        </div>\n\n    </div>)\n}\n\nSyllabaryCard.propTypes = {\n    handleClick: propTypes.func.isRequired,\n    id: propTypes.number.isRequired,\n    flipped: propTypes.bool.isRequired,\n    type: propTypes.string.isRequired,\n    height: propTypes.number.isRequired,\n    width: propTypes.number.isRequired\n}","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport SyllabaryCard from '../syllabarycard';\n//import SyllabaryCards from '';\n\nexport default function SyllabaryBoard({\n    cards, flipped, handleClick\n}){\n    return (\n        <div className=\"board\">\n            {cards.map((card) => (\n                 <SyllabaryCard \n                 key={card.id}\n                 id={card.id}\n                 type={card.type}\n                 width={100}\n                 height={150}\n                 flipped={flipped.includes(card.id)}\n                 handleClick={() => handleClick(card.id)}\n\n                 \n                 />\n\n                ))\n            }\n\n        </div>\n    )\n}\n\nSyllabaryBoard.propTypes = {\n    cards: propTypes.arrayOf(propTypes.shape({})).isRequired,\n    flipped: propTypes.arrayOf(propTypes.number).isRequired,\n    handleClick: propTypes.func.isRequired,\n}","export const KATAKANA = [\n  \"A\",\n  \"I\",\n  \"U\",\n  \"E\",\n  \"O\",\n  \"KA\",\n  \"KI\",\n  \"KU\",\n  \"KE\",\n  \"KO\",\n  \"GA\",\n  \"GI\",\n  \"GU\",\n  \"GE\",\n  \"GO\",\n  \"SA\",\n  \"SHI\",\n  \"SU\",\n  \"SE\",\n  \"SO\",\n  \"TA\",\n  \"CHI\",\n  \"TSU\",\n  \"TE\",\n  \"TO\",\n  \"NA\",\n  \"NI\",\n  \"NU\",\n  \"NE\",\n  \"NO\",\n  \"HA\",\n  \"HI\",\n  \"HU\",\n  \"HE\",\n  \"HO\",\n  \"MA\",\n  \"MI\",\n  \"MU\",\n  \"ME\",\n  \"MO\",\n  \"YA\",\n  \"YU\",\n  \"YO\",\n  \"RA\",\n  \"RI\",\n  \"RU\",\n  \"RE\",\n  \"RO\",\n  \"WA\",\n  \"WO\",\n  \"N\"\n];\n","export default () => [\n  \"A\",\n  \"I\",\n  \"U\",\n  \"E\",\n  \"O\",\n  \"KA\",\n  \"KI\",\n  \"KU\",\n  \"KE\",\n  \"KO\",\n  \"GA\",\n  \"GI\",\n  \"GU\",\n  \"GE\",\n  \"GO\",\n  \"SA\",\n  \"SHI\",\n  \"SU\",\n  \"SE\",\n  \"SO\",\n  \"TA\",\n  \"CHI\",\n  \"TSU\",\n  \"TE\",\n  \"TO\",\n  \"NA\",\n  \"NI\",\n  \"NU\",\n  \"NE\",\n  \"NO\",\n  \"HA\",\n  \"HI\",\n  \"HU\",\n  \"HE\",\n  \"HO\",\n  \"MA\",\n  \"MI\",\n  \"MU\",\n  \"ME\",\n  \"MO\",\n  \"YA\",\n  \"YU\",\n  \"YO\",\n  \"RA\",\n  \"RI\",\n  \"RU\",\n  \"RE\",\n  \"RO\",\n  \"WA\",\n  \"WO\",\n  \"N\"\n];\n","import { KATAKANA } from \"./utils/syllabariesCharacters\";\nimport Syllabary from \"./utils/syllabary\";\n\nfunction shuffle(array) {\n  const _array = array.slice(0);\n  for (let i = 0; i < array.length - 1; i++) {\n    let randomIndex = Math.floor(Math.random() * (i + 1));\n    let temp = _array[i];\n    _array[i] = _array[randomIndex];\n    _array[randomIndex] = temp;\n  }\n  return _array;\n}\n\nexport function getKatakanaSyllabary() {\n  let id = 0;\n  const SyllabariesChar = [...KATAKANA];\n  const katakanaCards = SyllabariesChar.reduce((acc, type) => {\n    acc.push({\n      id: id++,\n      type\n    });\n    return acc;\n  }, []);\n  return katakanaCards;\n}\n\nconst CARDS_NUMBER = 16;\nexport function initializeDeck() {\n  //función para generar baraja aleatoria a partir del silabario\n  const syllabary = Syllabary();\n  console.log(\"syllabary \", syllabary);\n\n  let cards = [];\n  let id = 0;\n  while (cards.length < CARDS_NUMBER) {\n    const index = Math.floor(Math.random() * syllabary.length);\n    cards.push({\n      id: id++,\n      type: syllabary.splice(index, 1)[0]\n    });\n    cards.push({\n      id: id++,\n      type: syllabary.splice(index, 1)[0]\n    });\n    console.log(cards);\n  }\n  return shuffle(cards);\n}\n","import React, { useState, useEffect } from 'react';\nimport SyllabaryBoard from '../syllabaryboard';\n\nimport * as Deck from '../../deck'\n\nexport default function Syllabary() { \n//export default class Syllabary extends Component {\n    //render(){\n    const [cards, setCards] = useState([])\n    const [flipped, setFlipped] = useState([])\n\n    const handleClick = (id) => setFlipped([...flipped, id])\n\n    useEffect(()=>{\n        setCards(Deck.getKatakanaSyllabary())\n    }, [])\n\n        return(\n            <div class=\"container\">\n                <div class=\"row\">\n                    <div class=\"align-self-center justify-content-center\">\n                        <h1>Katakana Syllabary</h1>\n                        <SyllabaryBoard\n                        cards={cards}\n                        flipped={flipped}\n                        handleClick={handleClick}\n                        />\n                       \n                    </div>\n                </div>\n            </div>\n        )\n   // }\n}","import React, { Component } from 'react';\n\nexport default class Game extends Component {\n    render(){\n        return(\n            <h1>Hola Game</h1>\n        )\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './styles.css'\n\n//destructuring instead passing props\nexport default function MemoryCard({ \n    handleClick,\n    disabled, \n    id, \n    type,\n    flipped,\n    solved,  \n    height, \n    width\n}){\n    return(\n        <div className={`flip-container ${flipped ? 'flipped' : ''}`}\n            style={{\n                width, height\n            }}\n            onClick={() => disabled ? null : handleClick(id)}\n        >\n            <div className=\"flipper\">\n                <img \n                style={{\n                    height, width\n                }}\n                className={flipped ? 'front' : 'back'}\n                src={flipped || solved ? `${process.env.PUBLIC_URL}/img/katakana/${type}.png` : `${process.env.PUBLIC_URL}/img/katakana/back.jpg`}\n                />\n\n            </div>\n        </div>\n    )\n}\n\nMemoryCard.propTypes = {\n    handleClick: PropTypes.func.isRequired,\n    disabled: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n    flipped: PropTypes.bool.isRequired,\n    flipped: PropTypes.bool.isRequired,\n    type: PropTypes.string.isRequired,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport MemoryCard from '../card/MemoryCard';\n\nimport './styles.css';\n\nexport default function Board({\n    disabled,\n    dimension, \n    cards, \n    flipped,\n    solved, \n    handleClick\n}) {\n    return (\n        <div className='board'>\n            {cards.map((card) => (\n                <MemoryCard \n                key={card.id}\n                id={card.id}\n                type={card.type}\n                width={dimension / 4.5}\n                height={dimension / 4.5}\n                flipped={flipped.includes(card.id)}\n                solved={solved.includes(card.id)}\n                handleClick={handleClick}\n                disabled={disabled || solved.includes(card.id)}\n        />\n\n    ))}\n\n        </div>\n    )\n    \n}\n\nBoard.propTypes = {\n    disabled: PropTypes.bool.isRequired,\n    dimension: PropTypes.number.isRequired,\n    cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\n    solved: PropTypes.arrayOf(PropTypes.number).isRequired,\n    handleClick: PropTypes.func.isRequired\n}","import React, { Component, useState, useEffect } from 'react';\nimport Board from '../board';\nimport { initializeDeck } from '../../deck';\n\nexport default function MemoryGame()  {\n    const [cards, setCards] = useState([])\n    const [flipped, setFlipped] = useState([])\n    const [dimension, setDimension] = useState(400)\n    //tracking the ids from the solved cards\n    const [solved, setSolved] = useState([])\n    //disabled the board when a card has been flipped and when are two cards\n    const [disabled, setDisabled] = useState(false)\n\n    useEffect(()=>{\n        resizeBoard()\n        setCards(initializeDeck())\n    }, [])\n\n    useEffect(() => {\n        preloadImages()\n    }, cards)\n\n    useEffect(()=>{\n        const resizeListener = window.addEventListener('resize', resizeBoard);\n\n        return() => window.removeEventListener('resize', resizeListener)\n    })\n\n    const handleClick = (id) => {\n        setDisabled(true)\n        if(flipped.length === 0){\n            setFlipped([id]);\n            setDisabled(false);\n        } else {\n            if(sameCardClicked(id)) return\n            setFlipped([flipped[0], id])\n            if(isMatch(id)){\n                setSolved([...solved, flipped[0], id])\n                resetCards();\n            } else {\n                setTimeout(resetCards, 2000)\n            }\n        }\n    }\n\n    const preloadImages = () => {\n        cards.map((card) => {\n            const src = `${process.env.PUBLIC_URL}/img/katakana/${card.type}.png`;\n            console.log(src);\n            new Image().src = src;\n        })\n    }\n\n    const resetCards = () => {\n        setFlipped([]);\n        setDisabled(false);\n    }\n\n    const sameCardClicked = (id) => flipped.includes(id);\n\n    const isMatch = (id) => {\n        const clickedCard = cards.find((card) => card.id === id)\n        const flippedCard = cards.find((card) => flipped[0] === card.id)\n        return flippedCard.type === clickedCard.type\n    }\n\n    const resizeBoard = () => {\n        setDimension(Math.min(\n            document.documentElement.clientWidth,\n            document.documentElement.clientHeight\n        ))\n    }\n   \n        return(\n           <div>\n               <h2>do you remember where are the pair card?</h2>\n            <Board\n            dimension={dimension} \n            cards={cards} \n            flipped={flipped}\n            handleClick={handleClick}\n            disabled={disabled}\n            solved={solved}\n            />\n           </div>\n        )\n}","import React, { useState } from 'react';\nimport { HashRouter as Router, Route, Link } from 'react-router-dom';\nimport './App.css';\n\nimport HomePage from './components/Home';\nimport SyllabaryPage from './components/Syllabary';\nimport GamePage from './components/Game';\nimport MemoryGamePage from './components/MemoryGame';\n\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap';\n\nfunction App() {\n\n  const [ collapsed, setCollapsed ] = useState(false);\n\n  const toggleNavbar = () => {\n    /*\n    if(!collapsed){\n     setCollapsed(false);\n    }else{setCollapsed(true)}*/\n     return collapsed ? setCollapsed(false) : setCollapsed(true);\n    }\n    // <NavbarBrand as={Link} to={HomePage} className=\"mr-auto\">Learn syllabaries</NavbarBrand>\n\n  return (\n    <div className=\"App\">\n    <Router>\n      <div>\n      <Navbar color=\"faded\" light> \n          <NavbarBrand  className=\"mr-auto\"><Link to='/'>Learn Syllabaries</Link></NavbarBrand>\n          <NavbarToggler onClick={()=>{toggleNavbar()}} className=\"mr-2\" />\n          <Collapse isOpen={collapsed} navbar>\n            <Nav navbar>\n              <NavItem>\n                <NavLink><Link to='/syllabary'>Syllabaries</Link></NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink><Link to='/memorygame'>Play</Link></NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n        <Route path=\"/\" exact component={HomePage} />\n        <Route path=\"/syllabary\" component={SyllabaryPage} />\n        <Route path=\"/game\" component={GamePage} />\n        <Route path=\"/memorygame\" component={MemoryGamePage} />\n      </div>\n    </Router>\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}