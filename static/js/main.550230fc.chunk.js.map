{"version":3,"sources":["components/Home/index.js","components/syllabarycard/index.jsx","components/syllabaryboard/index.jsx","utils/syllabariesCharacters.js","utils/syllabary.js","deck.js","components/Syllabary/index.js","components/Game/index.js","components/card/MemoryCard.jsx","components/board/index.jsx","components/MemoryGame/index.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","Component","SyllabaryCard","handleClick","id","type","flipped","height","width","style","onClick","toLowerCase","src","process","SyllabaryBoard","cards","map","card","key","includes","KATAKANA","CARDS_NUMBER","initializeDeck","syllabary","Syllabary","console","log","length","index","Math","floor","random","splice","push","char","array","_array","slice","i","randomIndex","temp","shuffle","useState","setCards","setFlipped","resetCard","sameCardClicked","useEffect","reduce","acc","Deck","class","Game","MemoryCard","disabled","solved","backgroundImage","Board","dimension","MemoryGame","setDimension","setSolved","setDisabled","resizeBoard","preloadImages","resizeListener","window","addEventListener","removeEventListener","Image","resetCards","isMatch","clickedCard","find","min","document","documentElement","clientWidth","clientHeight","setTimeout","App","collapsed","setCollapsed","Navbar","color","light","NavbarBrand","to","NavbarToggler","Collapse","isOpen","navbar","Nav","NavItem","NavLink","path","exact","component","HomePage","SyllabaryPage","GamePage","MemoryGamePage","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8ZAEqBA,E,iLAEb,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,iDACV,oDAEA,qP,GAPaC,a,MCGnB,SAASC,EAAT,GAOX,IANFC,EAMC,EANDA,YACAC,EAKC,EALDA,GACAC,EAIC,EAJDA,KACAC,EAGC,EAHDA,QACAC,EAEC,EAFDA,OACAC,EACC,EADDA,MAEA,OACE,yBACER,UAAS,yBAAoBM,EAAU,UAAY,IACnDG,MAAO,CACLD,QACAD,UAEFG,QAAS,kBAAMP,EAAYC,KAE3B,yBAAKJ,UAAU,WACb,yBAAKS,MAAO,GAAIT,UAAWM,EAAU,QAAU,QAC5CA,EACC,yBAAKN,UAAU,mBACb,2CAAaK,EAAKM,iBAGpB,yBACEF,MAAO,CAAEF,SAAQC,SACjBI,IAAG,UAAKC,kBAAL,yBAA4CR,EAA5C,aCzBF,SAASS,EAAT,GAA0D,IAAhCC,EAA+B,EAA/BA,MAAOT,EAAwB,EAAxBA,QAASH,EAAe,EAAfA,YACvD,OACE,yBAAKH,UAAU,SACZe,EAAMC,IAAI,SAAAC,GAAI,OACb,kBAACf,EAAD,CACEgB,IAAKD,EAAKb,GACVA,GAAIa,EAAKb,GACTC,KAAMY,EAAKZ,KACXG,MAAO,IACPD,OAAQ,IACRD,QAASA,EAAQa,SAASF,EAAKb,IAC/BD,YAAa,kBAAMA,EAAYc,EAAKb,U,0BCjBjCgB,EAAW,CACtB,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KCnDa,mBAAM,CACnB,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,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","file":"static/js/main.550230fc.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Home extends Component {\n    render(){\n        return(\n            <div className=\"container\">\n                <div className=\"row align-items-center justify-content-center\">\n                     <h1>Japanese Syllabaries</h1>\n\n                     <p> If you are interested on learn the japanese syllabaries we invite you to get familiar with the katakana syllabary on our Syllabaries section, \n                         and to play with a syllabary memory game to prove your memory :)! \n                     </p>\n\n                </div>\n\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport propTypes from \"prop-types\";\n\nimport \"./styles.css\";\n\nexport default function SyllabaryCard({\n  handleClick,\n  id,\n  type,\n  flipped,\n  height,\n  width\n}) {\n  return (\n    <div\n      className={`flip-container ${flipped ? \"flipped\" : \"\"}`}\n      style={{\n        width,\n        height\n      }}\n      onClick={() => handleClick(id)}\n    >\n      <div className=\"flipper\">\n        <div style={{}} className={flipped ? \"front\" : \"back\"}>\n          {flipped ? (\n            <div className=\"alphabet-letter\">\n              <section>{`${type.toLowerCase()}`}</section>\n            </div>\n          ) : (\n            <img\n              style={{ height, width }}\n              src={`${process.env.PUBLIC_URL}/img/katakana/${type}.png`}\n            ></img>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nSyllabaryCard.propTypes = {\n  handleClick: propTypes.func.isRequired,\n  id: propTypes.number.isRequired,\n  flipped: propTypes.bool.isRequired,\n  type: propTypes.string.isRequired,\n  height: propTypes.number.isRequired,\n  width: propTypes.number.isRequired\n};\n","import React from \"react\";\nimport propTypes from \"prop-types\";\n\nimport SyllabaryCard from \"../syllabarycard\";\n//import SyllabaryCards from '';\n\nexport default function SyllabaryBoard({ cards, flipped, handleClick }) {\n  return (\n    <div className=\"board\">\n      {cards.map(card => (\n        <SyllabaryCard\n          key={card.id}\n          id={card.id}\n          type={card.type}\n          width={150}\n          height={150}\n          flipped={flipped.includes(card.id)}\n          handleClick={() => handleClick(card.id)}\n        />\n      ))}\n    </div>\n  );\n}\n\nSyllabaryBoard.propTypes = {\n  cards: propTypes.arrayOf(propTypes.shape({})).isRequired,\n  flipped: propTypes.arrayOf(propTypes.number).isRequired,\n  handleClick: propTypes.func.isRequired\n};\n","export const KATAKANA = [\n  \"A\",\n  \"I\",\n  \"U\",\n  \"E\",\n  \"O\",\n  \"KA\",\n  \"KI\",\n  \"KU\",\n  \"KE\",\n  \"KO\",\n  \"GA\",\n  \"GI\",\n  \"GU\",\n  \"GE\",\n  \"GO\",\n  \"SA\",\n  \"SHI\",\n  \"SU\",\n  \"SE\",\n  \"SO\",\n  \"TA\",\n  \"CHI\",\n  \"TSU\",\n  \"TE\",\n  \"TO\",\n  \"NA\",\n  \"NI\",\n  \"NU\",\n  \"NE\",\n  \"NO\",\n  \"HA\",\n  \"HI\",\n  \"HU\",\n  \"HE\",\n  \"HO\",\n  \"MA\",\n  \"MI\",\n  \"MU\",\n  \"ME\",\n  \"MO\",\n  \"YA\",\n  \"YU\",\n  \"YO\",\n  \"RA\",\n  \"RI\",\n  \"RU\",\n  \"RE\",\n  \"RO\",\n  \"WA\",\n  \"WO\",\n  \"N\"\n];\n","export default () => [\n  \"A\",\n  \"I\",\n  \"U\",\n  \"E\",\n  \"O\",\n  \"KA\",\n  \"KI\",\n  \"KU\",\n  \"KE\",\n  \"KO\",\n  \"GA\",\n  \"GI\",\n  \"GU\",\n  \"GE\",\n  \"GO\",\n  \"SA\",\n  \"SHI\",\n  \"SU\",\n  \"SE\",\n  \"SO\",\n  \"TA\",\n  \"CHI\",\n  \"TSU\",\n  \"TE\",\n  \"TO\",\n  \"NA\",\n  \"NI\",\n  \"NU\",\n  \"NE\",\n  \"NO\",\n  \"HA\",\n  \"HI\",\n  \"HU\",\n  \"HE\",\n  \"HO\",\n  \"MA\",\n  \"MI\",\n  \"MU\",\n  \"ME\",\n  \"MO\",\n  \"YA\",\n  \"YU\",\n  \"YO\",\n  \"RA\",\n  \"RI\",\n  \"RU\",\n  \"RE\",\n  \"RO\",\n  \"WA\",\n  \"WO\",\n  \"N\"\n];\n","import { KATAKANA } from \"./utils/syllabariesCharacters\";\nimport Syllabary from \"./utils/syllabary\";\n\nfunction shuffle(array) {\n  const _array = array.slice(0);\n  for (let i = 0; i < array.length - 1; i++) {\n    let randomIndex = Math.floor(Math.random() * (i + 1));\n    let temp = _array[i];\n    _array[i] = _array[randomIndex];\n    _array[randomIndex] = temp;\n  }\n  return _array;\n}\n\nexport function getKatakanaSyllabary() {\n  let id = 0;\n  const SyllabariesChar = [...KATAKANA];\n  const katakanaCards = SyllabariesChar.reduce((acc, type) => {\n    acc.push({\n      id: id++,\n      type\n    });\n    return acc;\n  }, []);\n  return katakanaCards;\n}\n\nconst CARDS_NUMBER = 16;\nexport function initializeDeck() {\n  //función para generar baraja aleatoria a partir del silabario\n  const syllabary = Syllabary();\n  console.log(\"syllabary \", syllabary);\n\n  let cards = [];\n  let id = 0;\n  let char = true;\n  while (cards.length < CARDS_NUMBER) {\n    const index = Math.floor(Math.random() * syllabary.length);\n    let card = {\n      id: id++,\n      type: syllabary.splice(index, 1)[0]\n    };\n    cards.push(card);\n\n    cards.push({ ...card, char, id: id++ });\n  }\n  return shuffle(cards);\n}\n","import React, { useState, useEffect } from \"react\";\nimport SyllabaryBoard from \"../syllabaryboard\";\nimport \"./styles.css\";\n\nimport * as Deck from \"../../deck\";\n\nexport default function Syllabary() {\n  const [cards, setCards] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n\n  const handleClick = id => {\n    if (flipped.length === 0) {\n      setFlipped([id]);\n    }\n    if (sameCardClicked(id)) {\n      return setFlipped([]);\n    }\n    if (flipped.length === 1) {\n      resetCard();\n      setFlipped([id]);\n    }\n  };\n\n  const resetCard = () => {\n    setFlipped([]);\n  };\n\n  const sameCardClicked = id => flipped.includes(id);\n\n  useEffect(() => {\n    setCards(Deck.getKatakanaSyllabary());\n  }, []);\n\n  return (\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"align-self-center justify-content-center\">\n          <h1 className=\"page-title\">Katakana Syllabary</h1>\n          <SyllabaryBoard\n            cards={cards}\n            flipped={flipped}\n            handleClick={handleClick}\n          />\n        </div>\n      </div>\n    </div>\n  );\n  // }\n}\n","import React, { Component } from 'react';\n\nexport default class Game extends Component {\n    render(){\n        return(\n            <h1>Hola Game</h1>\n        )\n    }\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./styles.css\";\n\n//destructuring instead passing props\nexport default function MemoryCard({\n  handleClick,\n  disabled,\n  id,\n  type,\n  char,\n  flipped,\n  solved,\n  height,\n  width\n}) {\n  return (\n    <div\n      className={`flip-container ${flipped ? \"flipped\" : \"\"}`}\n      onClick={() => (disabled ? null : handleClick(id))}\n    >\n      <div className=\"flipper\">\n        <div\n          className={flipped ? \"front\" : \"back\"}\n          style={{\n            width,\n            height\n          }}\n        >\n          {flipped || solved ? (\n            <div\n              className=\"char-container\"\n              style={{\n                backgroundImage: `url(${process.env.PUBLIC_URL}/img/katakana/${type}.png)`\n              }}\n            >\n              <div>{char === true ? `${type}` : \"\"}</div>\n            </div>\n          ) : (\n            <img\n              style={{\n                height,\n                width\n              }}\n              src={`${process.env.PUBLIC_URL}/img/katakana/back.jpg`}\n            />\n          )}\n        </div>\n        <img\n          style={{\n            height,\n            width\n          }}\n          src={\n            flipped || solved\n              ? `${process.env.PUBLIC_URL}/img/katakana/${type}.png`\n              : `${process.env.PUBLIC_URL}/img/katakana/back.jpg`\n          }\n        />\n      </div>\n    </div>\n  );\n}\n\nMemoryCard.propTypes = {\n  handleClick: PropTypes.func.isRequired,\n  disabled: PropTypes.bool.isRequired,\n  id: PropTypes.number.isRequired,\n  flipped: PropTypes.bool.isRequired,\n  flipped: PropTypes.bool.isRequired,\n  type: PropTypes.string.isRequired,\n  char: PropTypes.bool,\n  height: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport MemoryCard from \"../card/MemoryCard\";\n\nimport \"./styles.css\";\n\nexport default function Board({\n  disabled,\n  dimension,\n  cards,\n  flipped,\n  solved,\n  handleClick\n}) {\n  return (\n    <div className=\"board\">\n      {cards.map(card => (\n        <MemoryCard\n          key={card.id}\n          id={card.id}\n          type={card.type}\n          char={card.char}\n          width={dimension / 4.5}\n          height={dimension / 4.5}\n          flipped={flipped.includes(card.id)}\n          solved={solved.includes(card.id)}\n          handleClick={handleClick}\n          disabled={disabled || solved.includes(card.id)}\n        />\n      ))}\n    </div>\n  );\n}\n\nBoard.propTypes = {\n  disabled: PropTypes.bool.isRequired,\n  dimension: PropTypes.number.isRequired,\n  cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\n  solved: PropTypes.arrayOf(PropTypes.number).isRequired,\n  handleClick: PropTypes.func.isRequired\n};\n","import React, { Component, useState, useEffect } from \"react\";\nimport Board from \"../board\";\nimport { initializeDeck } from \"../../deck\";\n\nexport default function MemoryGame() {\n  const [cards, setCards] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n  const [dimension, setDimension] = useState(400);\n  //tracking the ids from the solved cards\n  const [solved, setSolved] = useState([]);\n  //disabled the board when a card has been flipped and when are two cards\n  const [disabled, setDisabled] = useState(false);\n\n  useEffect(() => {\n    resizeBoard();\n    setCards(initializeDeck());\n  }, []);\n\n  useEffect(() => {\n    preloadImages();\n  }, cards);\n\n  useEffect(() => {\n    const resizeListener = window.addEventListener(\"resize\", resizeBoard);\n\n    return () => window.removeEventListener(\"resize\", resizeListener);\n  });\n\n  const handleClick = id => {\n    setDisabled(true);\n    if (flipped.length === 0) {\n      setFlipped([id]);\n      setDisabled(false);\n    } else {\n      if (sameCardClicked(id)) return;\n      setFlipped([flipped[0], id]);\n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id]);\n        resetCards();\n      } else {\n        setTimeout(resetCards, 2000);\n      }\n    }\n  };\n\n  const preloadImages = () => {\n    cards.map(card => {\n      const src = `${process.env.PUBLIC_URL}/img/katakana/${card.type}.png`;\n      console.log(src);\n      new Image().src = src;\n    });\n  };\n\n  const resetCards = () => {\n    setFlipped([]);\n    setDisabled(false);\n  };\n\n  const sameCardClicked = id => flipped.includes(id);\n\n  const isMatch = id => {\n    const clickedCard = cards.find(card => card.id === id);\n    const flippedCard = cards.find(card => flipped[0] === card.id);\n    return flippedCard.type === clickedCard.type;\n  };\n\n  const resizeBoard = () => {\n    setDimension(\n      Math.min(\n        document.documentElement.clientWidth,\n        document.documentElement.clientHeight\n      )\n    );\n  };\n\n  return (\n    <div>\n      <h2>do you remember where are the pair card?</h2>\n      <Board\n        dimension={dimension}\n        cards={cards}\n        flipped={flipped}\n        handleClick={handleClick}\n        disabled={disabled}\n        solved={solved}\n      />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport styled from \"styled-components\";\n\nimport HomePage from \"./components/Home\";\nimport SyllabaryPage from \"./components/Syllabary\";\nimport GamePage from \"./components/Game\";\nimport MemoryGamePage from \"./components/MemoryGame\";\n\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\n\nfunction App() {\n  const [collapsed, setCollapsed] = useState(false);\n\n  const toggleNavbar = () => {\n    if (!collapsed) {\n      setCollapsed(false);\n    } else {\n      setCollapsed(true);\n    }\n    return collapsed ? setCollapsed(false) : setCollapsed(true);\n  };\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          <Navbar color=\"faded\" light>\n            <NavbarBrand className=\"mr-auto\">\n              <Link to=\"/\">Learn Syllabaries</Link>\n            </NavbarBrand>\n            <NavbarToggler\n              onClick={() => {\n                toggleNavbar();\n              }}\n              className=\"mr-2\"\n            />\n            <Collapse isOpen={collapsed} navbar>\n              <Nav navbar>\n                <NavItem>\n                  <NavLink>\n                    <Link to=\"/syllabary\">Syllabaries</Link>\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink>\n                    <Link to=\"/memorygame\">Play</Link>\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </Collapse>\n          </Navbar>\n          <Route path=\"/\" exact component={HomePage} />\n          <Route path=\"/syllabary\" component={SyllabaryPage} />\n          <Route path=\"/game\" component={GamePage} />\n          <Route path=\"/memorygame\" component={MemoryGamePage} />\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}